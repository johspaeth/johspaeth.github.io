[{"authors":["Johannes Späth"],"categories":null,"content":"","date":1552518000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552518000,"objectID":"535c6ff49d79b49c652b497313019bd8","permalink":"/publication/dissertation/","publishdate":"2019-03-14T00:00:00+01:00","relpermalink":"/publication/dissertation/","section":"publication","summary":"","tags":null,"title":"Synchronized Pushdown Systems for Pointer and Data-Flow Analysis (PhD Dissertation)","type":"publication"},{"authors":null,"categories":null,"content":"Synchronized Pushdown Systems (SPDS) are a recently development for efficient and precise data-flow analysis. SPDS relies on two pushdown systems, one system models field-sensitivity, the other one context-sensitivity. The results of both systems are then synchronized and yield a field- and context-sensitive data-flow analysis.\nThe implementation of SPDS is found here:\nhttps://github.com/CROSSINGTUD/WPDS\n","date":1540677600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540677600,"objectID":"d525ea9bfbc8bbbca8af501395fe4608","permalink":"/project/spds/","publishdate":"2018-10-28T00:00:00+02:00","relpermalink":"/project/spds/","section":"project","summary":"Efficient and precise data-flow analysis.","tags":["static analysis","pointer analysis","pushdown systems","automata"],"title":"Synchronized Pushdown Systems","type":"project"},{"authors":null,"categories":null,"content":"$IDE^{al}$ is a generic and efficient data-flow framework for Java. $IDE^{al}$ can be instantiated for various data-flow problems, e.g., typestate analysis for the detection of misuses of application programming interfaces (API), linear constant propagation or mining of API uses. For more details see our OOPSLA2017 publication.\nWe recently re-designed and re-implemented based on Synchronized Pushdown Systems (SPDS). SPDS are an efficient replace for $k$-limited access paths or access graphs. $IDE^{al}$ originally relied on access graphs.\nThe implementation based on SPDS is found here.\nhttps://github.com/CROSSINGTUD/WPDS\nThe implementation based on access graphs is found here:\nhttps://github.com/secure-software-engineering/ideal\n","date":1537653600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1537653600,"objectID":"0c4f4783c2f2ac53c6af1d118136e67e","permalink":"/project/ideal/","publishdate":"2018-09-23T00:00:00+02:00","relpermalink":"/project/ideal/","section":"project","summary":"$IDE^{al}$ is an efficient and generic framework for pointer-tracking data-flow analysis.","tags":["static analysis","security"],"title":"Data-Flow Framework IDEal","type":"project"},{"authors":null,"categories":null,"content":"CogniCrypt is an Eclipse Plugin that supports software developers to use cryptographic libraries securely. CogniCrypt ships in two main feature: A code generation and a static code analysis continously checking modification in the code.\nFor more details, please visit the project website at\nhttps://www.cognicrypt.de\nJohannes Späth is involved in the static code analysis part of CogniCrypt. The static code analysis is configured by rules written in a domain-sepcific languauge, called CrySL. The CrySL rules are automatically compiled into a static code analysis that relies on Boomerang and $IDE^{al}$.\nThe static analysis of CogniCrypt is developed independently of Eclipse and can be executed on any Java byte code and Android APK files.\nFor more details, please visit the GitHub repositories\nhttps://github.com/CROSSINGTUD/CryptoAnalysis https://github.com/CROSSINGTUD/CryptoAnalysis-Android\n","date":1525903200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525903200,"objectID":"0611d1c2c040d3e6f18dbd5039811542","permalink":"/project/cognicrypt/","publishdate":"2018-05-10T00:00:00+02:00","relpermalink":"/project/cognicrypt/","section":"project","summary":"Support for software developers to securely using cryptography","tags":["static analysis","security"],"title":"CogniCrypt","type":"project"},{"authors":["Johannes Späth","Karim Ali","Eric Bodden"],"categories":null,"content":"","date":1514761200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514761200,"objectID":"a5177e35ac2d76d47588dacaf72807b8","permalink":"/publication/popl2019_spds/","publishdate":"2018-01-01T00:00:00+01:00","relpermalink":"/publication/popl2019_spds/","section":"publication","summary":"","tags":null,"title":"Context-, Flow- and Field-Sensitive Data-Flow Analysis using Synchronized Pushdown Systems","type":"publication"},{"authors":["Stefan Krüger","Johannes Späth","Karim Ali","Eric Bodden","Mira Mezini"],"categories":null,"content":"The recording of my talk at the conference is found here: https://www.youtube.com/watch?v=aTt4M2_TGPI\n","date":1514761200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514761200,"objectID":"d6b0ebd636145b3a0a9f999b2aefc579","permalink":"/publication/ecoop2018_crysl/","publishdate":"2018-01-01T00:00:00+01:00","relpermalink":"/publication/ecoop2018_crysl/","section":"publication","summary":"The recording of my talk at the conference is found here: https://www.youtube.com/watch?v=aTt4M2_TGPI","tags":null,"title":"CrySL: An Extensible Approach to Validating the Correct Usage of CryptographicAPIs","type":"publication"},{"authors":["Johannes Späth"],"categories":null,"content":"","date":1483225200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483225200,"objectID":"331d9bd933280e6c29bb51b86eb492fd","permalink":"/talk/ecoop-2016/","publishdate":"2017-01-01T00:00:00+01:00","relpermalink":"/talk/ecoop-2016/","section":"talk","summary":"","tags":[],"title":"Boomerang: Demand-Driven Flow- and Context-Sensitive Pointer Analysisfor Java","type":"talk"},{"authors":["Johannes Späth"],"categories":null,"content":"","date":1483225200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483225200,"objectID":"7f73578f547f7fecef744b3f613f3fc3","permalink":"/talk/popl-spds/","publishdate":"2017-01-01T00:00:00+01:00","relpermalink":"/talk/popl-spds/","section":"talk","summary":"","tags":[],"title":"Context-, Flow- and Field-Sensitive Data-Flow Analysis using Synchronized Pushdown Systems","type":"talk"},{"authors":["Johannes Späth","Karim Ali","Eric Bodden"],"categories":null,"content":"The recording of the talk at the conference is found here: https://www.youtube.com/watch?v=0gGlXgnoX18\n","date":1483225200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483225200,"objectID":"2d0f4d23a504a14e42b5056d62f0cbbd","permalink":"/publication/oopsla2017_ideal/","publishdate":"2017-01-01T00:00:00+01:00","relpermalink":"/publication/oopsla2017_ideal/","section":"publication","summary":"The recording of the talk at the conference is found here: https://www.youtube.com/watch?v=0gGlXgnoX18","tags":null,"title":"IDEal: Efficient and Precise Alias-Aware Data-Flow Analysis","type":"publication"},{"authors":["Johannes Späth"],"categories":null,"content":"","date":1483225200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483225200,"objectID":"d443ea60d4b2c377f997947d05af4131","permalink":"/talk/oopsla-2017/","publishdate":"2017-01-01T00:00:00+01:00","relpermalink":"/talk/oopsla-2017/","section":"talk","summary":"","tags":[],"title":"IDEal: Efficient and Precise Alias-aware Data-Flow Analysis","type":"talk"},{"authors":["Johannes Späth","Stefan Krüger"],"categories":null,"content":"","date":1483225200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483225200,"objectID":"12f69aaceb4b51576dfe058331a4634e","permalink":"/talk/eclipsecon-2018/","publishdate":"2017-01-01T00:00:00+01:00","relpermalink":"/talk/eclipsecon-2018/","section":"talk","summary":"","tags":[],"title":"You forgot to changeit - CogniCrypt knows it!","type":"talk"},{"authors":null,"categories":null,"content":"Boomerang is an efficient and precise demand-driven pointer analysis for Java. It achieves efficiency by propagating pointer relations in a distributive manner. For more details see our ECOOP2016 publication on Boomerang.\nWe recently redesigned Boomerang based on Synchronized Pushdown Systems (SPDS). SPDS are an efficient replace for $k$-limited access paths or access graphs, the original heap model Boomerang relied on.\nThe implementation based on SPDS is found here.\nhttps://github.com/CROSSINGTUD/WPDS\nThe old implementation is found here.\nhttps://github.com/secure-software-engineering/boomerang\n","date":1467583200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1467583200,"objectID":"7827aff2440927e7cc74607be4ad4858","permalink":"/project/boomerang/","publishdate":"2016-07-04T00:00:00+02:00","relpermalink":"/project/boomerang/","section":"project","summary":"Boomerang is a demand-driven pointer analysis for Java.","tags":["static analysis","pointer analysis"],"title":"Pointer Analysis Boomerang","type":"project"},{"authors":["Johannes Späth","Lisa Nguyen Quang Do","Karim Ali","Eric Bodden"],"categories":null,"content":"","date":1451602800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451602800,"objectID":"9a83bceeb801b083135fc708cdb1ca96","permalink":"/publication/ecoop2016_boomerang/","publishdate":"2016-01-01T00:00:00+01:00","relpermalink":"/publication/ecoop2016_boomerang/","section":"publication","summary":"","tags":null,"title":"Boomerang: Demand-Driven Flow- and Context-Sensitive Pointer Analysisfor Java","type":"publication"},{"authors":["Johannes Lerch","Johannes Späth","Eric Bodden","Mira Mezini"],"categories":null,"content":"","date":1420066800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1420066800,"objectID":"dfc5923f64246ceac40e33975686c47a","permalink":"/publication/ase2015_ifdsapa/","publishdate":"2015-01-01T00:00:00+01:00","relpermalink":"/publication/ase2015_ifdsapa/","section":"publication","summary":"","tags":null,"title":"Access-Path Abstraction: Scaling Field-Sensitive Data-Flow Analysiswith Unbounded Access Paths","type":"publication"}]